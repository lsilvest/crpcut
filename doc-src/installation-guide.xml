<?xml version="1.0"?>
<!DOCTYPE book
          [
          <!ENTITY crpcut "<productname xmlns='http://docbook.org/ns/docbook'>crpcut</productname>">
          <!ENTITY vcrpcut "<productname xmlns='http://docbook.org/ns/docbook'>crpcut-<print_version xmlns=''/></productname>">
          <!ENTITY version      "<version/>">
          <!ENTITY src_download_link "<src_download_link/>">
          <!ENTITY doc_download_link "<doc_download_link/>">
]>
<book version="5.0" encoding="ascii"  xml:lang="en"
      id="install-guide"
      xmlns="http://docbook.org/ns/docbook"
      xmlns:xi='http://www.w3.org/2001/XInclude'
      xmlns:xlink='http://www.w3.org/1999/xlink'>
<title>&vcrpcut; Installation Guide</title>
<chapter id="requirements">
  <title>&crpcut; Requirements</title>
  <para>The minimum requirement for installing and using &crpcut; is
    a modern <symbol>C++</symbol> compiler, a highly POSIX compliant
    operating system and <ulink url="http://www.cmake.org">CMake</ulink>.
    The short version is that any modern Linux will do fine.
  </para>
  <para>
    In addition to the minimum, you are encouraged to build on a machine
    with <ulink url="http://valgrind.org">valgrind</ulink> and
    <ulink url="http://www.ruby-lang.org">Ruby</ulink>.
  </para>
  <simplesect>
    <title>Compiler requirements</title>
    <para>Your C++ compiler must support:
      <variablelist>
        <varlistentry><term>Variadic macros</term>
          <listitem>
            <para>
              Variadic macros are required by C99, and are available on
              most C++ compilers. They are required by C++-2011 compilers
              soon.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><symbol>decltype</symbol> or <symbol>typeof</symbol></term>
          <listitem>
            <para>
              decltype is a new keyword in C++-2011 that gives the type of an
              expression, similarly to how sizeof gives the size of the type
              of an expression. GCC has since long had another extension,
              typeof, which doesn't quite do the same thing,
              but it's close enough to work.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><function>_Exit()</function></term>
          <listitem>
            <para>
              A function standardized for C99, and C++-2011. It is
              similar to <function>exit()</function> except that it
              exits immediately, without running any at-exit handlers
              or static destructors.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><type>uint64_t and uint32_t</type></term>
          <listitem>
            typedef's mandated by C99 and coming to C++-2011 compliant
            compilers.
          </listitem>
        </varlistentry>
      </variablelist>
    </para>
    <para><ulink url="http://gcc.gnu.org">GCC</ulink> supports these
      since long, and &crpcut; has been verified to work with versions
      4.3.4, 4.4.4, 4.5.3. and 4.6.2
    </para>
    <para><ulink url="http:clang.llvm.org">Clang</ulink> works
    since version 3.0</para>
    <para><ulink url="http://www.intel.com">Intel</ulink>
      <ulink url="http://software.intel.com/en-us/intel-compilers">ICC</ulink>
      version 1.11 is also verified to work, but requires the
      <ulink url="http://www.boost.org">boost</ulink> library to get
      access to tr1/type_traits and tr1/array. It has not received as
      extensive testing.</para>
  </simplesect>
  <simplesect>
    <title>Operating system requirements</title>
    <simplesect>
      <title>POSIX.1</title>
      <itemizedlist>
        <listitem><constant>EEXIST</constant></listitem>
        <listitem><constant>EINTR</constant></listitem>
      </itemizedlist>
    </simplesect>
    <simplesect>
      <title>POSIX.1-2001</title>
      <itemizedlist>
        <listitem><function>alloca</function>()</listitem>
        <listitem><function>chdir</function>()</listitem>
        <listitem><function>clock_gettime</function>(<constant>CLOCK_MONOTONIC</constant>)<footnote>
            <para>Otherwise,
              <function>mach_timebase_info</function>() and
              <function>mach_absolute_time</function>() will be
              used.</para><para> If those too are unavailable,
              <function>setitimer</function>(<constant>ITIMER_REAL</constant>)
              and
              <function>getitimer</function>(<constant>ITIMER_REAL</constant>)
              will be used.</para><para> If even that fails,
              <function>gettimeofday</function>() will be
              used.</para></footnote></listitem>
        <listitem><function>clock_gettime</function>(<constant>CLOCK_PROCESS_CPUTIME_ID</constant>)<footnote>
            <para>If unavailable,
              <function>setitimer</function>(<constant>ITIMER_PROF</constant>)
              and
              <function>getitimer</function>(<constant>ITIMER_PROF</constant>)
              will be used.</para><para> If even that fails,
              <function>setitimer</function>(<constant>ITIMER_VIRT</constant>)
              and
              <function>getitimer</function>(<constant>ITIMER_VIRT</constant>)
              will be used.
            </para>
          </footnote>
        </listitem>
        <listitem><function>close</function>()</listitem>
        <listitem><function>closedir</function>()</listitem>
        <listitem><function>dup2</function>()</listitem>
        <listitem><function>fork</function>()</listitem>
        <listitem><function>getcwd</function>()</listitem>
        <listitem><function>getenv</function>()</listitem>
        <listitem><function>gethostname</function>()</listitem>
        <listitem><function>getpgid</function>()</listitem>
        <listitem><function>getrusage</function>()</listitem>
        <listitem><function>iconv</function>()</listitem>
        <listitem><function>iconv_close</function>()</listitem>
        <listitem><function>iconv_open</function>()</listitem>
        <listitem><function>killpg</function>()</listitem>
        <listitem><function>mkdir</function>()</listitem>
        <listitem><function>open</function>()</listitem>
        <listitem><function>opendir</function>()</listitem>
        <listitem><function>pipe</function>()</listitem>
        <listitem><function>read</function>()</listitem>
        <listitem><function>readdir_r</function>()</listitem>
        <listitem><function>remove</function><footnote><para>A
        runtime dependency that is only required when using the
        <xref linkend="WIPE_WORKING_DIR" xrefstyle="select:title"/>
        function with either the
        <xref linkend="EXPECT_EXIT" xrefstyle="select:title"/>
        or the <xref linkend="EXPECT_SIGNAL_DEATH" xrefstyle="select:title"/>
        test case modifier.</para></footnote></listitem>

        <listitem><function>regcomp</function>(),
          <function>regexec</function>(),
          <function>regerror</function>() and
          <function>regfree</function>()<footnote><para>A
            runtime dependency that is only required when
            actually using the supported match functionality
            for regular expressions.</para></footnote></listitem>
        <listitem><function>rmdir</function>()</listitem>
        <listitem><function>select</function>()</listitem>
        <listitem><function>setpgid</function>()</listitem>
        <listitem><function>waitid</function>()</listitem>
        <listitem><function>write</function>()</listitem>
      </itemizedlist>
    </simplesect>
    <simplesect>
      <title>POSIX.1-2008</title>
      <itemizedlist>
        <listitem><function>mkdtemp</function>()</listitem>
      </itemizedlist>
    </simplesect>
  </simplesect>
</chapter>
<chapter id="preparation">
  <title>Preparation</title>
  <simplesect><title>Download &crpcut;</title>
    <para>
      If you haven't already done so, download the &crpcut; sources
      from &src_download_link;. The directory you unpack
      the sources to will be called <symbol>&lt;source-dir&gt;</symbol>
      in the rest of this guide. You may also want to download the
      documentation from &doc_download_link;.
    </para>
  </simplesect>
  <simplesect><title>Where to install to</title>
    <para>&crpcut; defaults to install under /usr/{lib,include,share}.
      If you want to use another destination, add the command line
      parameter
      <constant>-DCMAKE_INSTALL_PREFIX</constant>=<symbol>&lt;path&gt;</symbol>
      to the CMake line. The directory you want to install to will be called
      <symbol>&lt;prefix-dir&gt;</symbol> in the rest of this guide.
    </para>
    <para>
      You can also fine tune the name of the directory where the libraries are
      stored. Often seen variants are <symbol>lib</symbol>,
      <symbol>lib32</symbol> and <symbol>lib64</symbol>. By default
      the directory name is <symbol>lib64</symbol> on 64-bit systems, and
      just <symbol>lib</symbol> on 32-bit systems. You can choose your
      suffix with <constant>-DLIB_SUFFIX</constant>=<symbol>name</symbol>.
      If <symbol>name</symbol> is the empty string, <symbol>lib</symbol>
      will be used also on 32-bit systems. If you want something
      completely different, use
      <constant>-DLIBRARY_OUTPUT_PATH</constant>=<symbol>name</symbol>
      instead. Then <symbol>name</symbol> will be the complete name
      of the directory, and the suffix variable will be ignored.
    </para>
  </simplesect>
  <simplesect>
    <title>Support for
      <ulink url="http://valgrind.org">valgrind</ulink></title>
    <para>You are highly encouraged to build &crpcut; on a machine
      that has <ulink url="http://valgrind.org">valgrind</ulink> installed.
    </para>
    <para>
      If <symbol>&lt;valgrind/valgrind.h&gt;</symbol> can be found when
      running CMake, &crpcut; will add instrumentation instructions for
      valgrind. These instrumentation instructions are no-ops when running
      natively, or on a machine that doesn't have valgrind, but can help
      immensely in finding memory access errors when running tests under
      valgrind.
    </para>
    <para>If you build &crpcut; for a binary distribution, you should
      definitely build on a machine with valgrind.
    </para>
  </simplesect>
  <simplesect>
    <title id="backtrace-support">Stack backtraces</title>
    <para>For environments in which the
    <ulink url="http://www.kernel.org/doc/man-pages/online/pages/man3/backtrace.3.html"><function>backtrace</function></ulink>() function is available,
    &crpcut; can display a stack backtrace when heap violations are discovered
    (where the heap objects was allocated and, when applicable, where it was
    last  changed.) Should you not want this, add the command line parameter
    <constant>-DUSE_BACKTRACE=no</constant> to the CMake line.
    </para>
  </simplesect>
  <simplesect><title>Which compiler to use</title>
    <para>
    If you want to use another compiler than the default for CMake,
    or if CMake is unable to find one, prefix the CMake line with
    <constant>CXX</constant>="<symbol>&lt;compilername&gt;</symbol>",
    for example:
    <screen>

     bash &gt; CXX="g++-4.1.2" cmake /tmp/download/crpcut

</screen>
    </para>
  </simplesect>
  <simplesect><title>Debug compiled lib</title>
    <para>Compiling &crpcut; with debugging enabled may make it easier
      to debug your tests, or analyse core dumps, since the tests are
      started from &crpcut;</para>
    <para>To enable debug builds, add the command line parameter
      <constant>-DCMAKE_BUILD_TYPE</constant>="debug" to the CMake
      line when <link xref="building">building</link>.
    </para>
  </simplesect>
  <simplesect><title>Self test after build?</title>
    <para>Running a self test after build is a good way to verify
      that &crpcut; functions correctly. To run a self test, you
      need <ulink url="http://www.ruby-lang.org">ruby</ulink>,
      and you must enable core-dumps as "core" in the current working
      directory (since the self test verifies that certain crashes do
      dump core as expected.) If you run Linux, ensure that
      <symbol>/proc/sys/kernel/core_pattern</symbol> contains only the
      word "<symbol>core</symbol>".
    </para>
    <para>If you have
      <ulink url="http://code.google.com/p/googlemock">google-mock</ulink>
      installed, you can add a few test cases that verify google-mock
      interaction with &crpcut; by adding the command line parameter
      <constant>-DWITH_GOOGLE_MOCK</constant>=yes to the CMake.
      Should CMake be unable to find your google-mock installation,
      you can help it by adding the command line parameter
      <constant>-DGOOGLE_MOCK_DIR</constant>=<symbol>&lt;path-to-google-mock&gt;</symbol>.
    </para>
  </simplesect>
  <simplesect><title>Build documentation</title>
    <para>You are not encouraged to build the documentation yourself,
      but rather download it from sourceforge via &doc_download_link;.
      However, should you choose to build it anyway, you will need
      <itemizedlist>
        <listitem><ulink url="http://www.docbook.org">docbook</ulink>
          XSL NS version 1.75.2 or later.
        </listitem>
        <listitem>
          <ulink url="http://xmlsoft.org/XSLT/xsltproc2.html">xsltproc</ulink>
        </listitem>
        <listitem><ulink url="http://www.gnu.org/software/sed">GNU sed</ulink>
        </listitem>
        <listitem><ulink url="http://www.gnu.org/software/gdb">Thu GNU
            Project Debugger</ulink>
        </listitem>
        <listitem><ulink url="http://www.gnu.org/software/make/">GNU Make</ulink></listitem>
        <listitem><ulink url="http://code.google.com/p/googlemock">google-mock</ulink> version 1.4.0 or later.</listitem>
        <listitem>to allow processes do dump core</listitem>
        <listitem>the locales <symbol>sv_SE.utf8</symbol> and
          <symbol>de_DE.utf8</symbol>
        </listitem>
      </itemizedlist>
    </para>
    <para>
      You will also need to add
      <symbol>-DWITH_HTML_DOCS</symbol>=<constant>yes</constant>
      to the CMake command line.
    </para>
  </simplesect>
</chapter>
<chapter id="building and installing">
  <title>Building and Installing</title>
  <simplesect id="cmake">
    <title>Running cmake</title>
    <para>Before going on with the actual building, you need to run
      <ulink url="http://www.cmake.org">CMake</ulink>. Create a temporary
      directory, which will be referred to as the
      <symbol>&lt;build-directory&gt;</symbol>.
    </para>
    <para>Now, step by step
      <orderedlist>
        <listitem>
          <para>
            <screen>

     bash &gt; cd &lt;build-directory&gt;

</screen>
          </para>
        </listitem>
        <listitem>
          <para>
            Run CMake with the parameters mentioned above. For example, with
            <symbol>&lt;build-directory&gt;</symbol>=<symbol>/tmp/crpcut-&version;</symbol>,
            support for
            <ulink url="http://code.google.com/p/googlemock">google-mock</ulink>
            installed in a directory not known to CMake, and with
            &lt;prefix-dir&gt; just next to google-mock.
            <screen>

     bash &gt; cmake -DCMAKE_BUILD_TYPE=debug -DWITH_GOOGLE_MOCK \
     &gt; -DGOOGLE_MOCK_DIR=/usr/local/development-tools/gmock \
     &gt; -DCMAKE_INSTALL_PREFIX=/usr/local/development-tools/crpcut \
     &gt; /tmp/crpcut-&version;
            </screen>
          </para>
          <para>The output should look something like:
            <screen>

-- The C compiler identification is GNU
-- The CXX compiler identification is GNU
-- Check for working C compiler: /usr/bin/gcc
-- Check for working C compiler: /usr/bin/gcc -- works
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Check for working CXX compiler: /usr/bin/c++
-- Check for working CXX compiler: /usr/bin/c++ -- works
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Performing Test HAVE_CXX0X
-- Performing Test HAVE_CXX0X - Success
-- Looking for clock_gettime()
-- Looking for clock_gettime() - not found
-- Looking for clock_gettime in rt
-- Looking for clock_gettime in rt - found
-- Looking for mach_absolute_time
-- Looking for mach_absolute_time - not found
-- Looking for getitimer
-- Looking for getitimer - found
-- Looking for gettimeofday
-- Looking for gettimeofday - found
*** compiling with support for valgrind
-- Configuring done
-- Generating done
-- Build files have been written to: /tmp/crpcut-&version;

</screen>
          </para>
        </listitem>
        <listitem>
          <para>
            Now you are ready to build &crpcut; All it takes is to run
            <symbol>make</symbol>.
            <screen>

     bash &gt; make

</screen>
          </para>
          <para>The output from <symbol>make</symbol> is too much to list
            here.</para>
        </listitem>
        <listitem>
          <para>
          Run the self test, if you can. Before you start it, make sure the
          machine is lightly loaded. The self test includes a lot of
          timeout tests, which can be affected by the load on the host.
          The self test takes about a minute to run, with all those timeout
          tests under many different configurations.
          <screen>

     bash &gt; make selftest

</screen>
          </para>
          <para>Again, the output is a bit much to list here.</para>
        </listitem>
        <listitem>
          <para>You are now ready to install &crpcut; Installation is done
            by running <symbol>make install</symbol>. Make sure you have
            write permission to <symbol>&lt;prefix-dir&gt;</symbol>.</para>
        </listitem>
      </orderedlist>
    </para>
    <para>
      The file <symbol>&lt;build-directory&gt;/install_manifest</symbol>
      contains a list of every file installed, should you want to remove
      them.
    </para>
    <para>Now that the installation is done, you may want to get on with
      <link linkend="writing-tests">writing tests</link>.
    </para>
  </simplesect>
</chapter>
</book>
